# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json

version: 2

project_name: run-mcp

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - main: ./cmd/run-mcp
    id: run-mcp
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch: [amd64, arm64]
archives:
  - id: archives
    formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: [zip]
  - id: binaries
    formats: [binary]
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
gomod: # required for verifable builds
  proxy: true
source:
  enabled: true
checksum:
  name_template: 'checksums.txt'
sboms:
  - id: archive
    artifacts: archive
  - id: source # Two different sbom configurations need two different IDs
    artifacts: source
signs:
  - id: sign-archive
    cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: archive
    output: true
  - id: sign-binaries
    cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: binary
    output: true
  - id: sign-checksum
    cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: checksum
    output: true
  - id: sign-source
    cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: source
    output: true
  - id: sign-sbom
    cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: sbom
    output: true
notarize:
  macos:
    - enabled: '{{ isEnvSet "MACOS_SIGN_P12" }}'
      ids:
        - run-mcp
      sign:
        certificate: "{{.Env.MACOS_SIGN_P12}}"
        password: "{{.Env.MACOS_SIGN_PASSWORD}}"
      notarize:
        issuer_id: "{{.Env.MACOS_NOTARY_ISSUER_ID}}"
        key_id: "{{.Env.MACOS_NOTARY_KEY_ID}}"
        key: "{{.Env.MACOS_NOTARY_KEY}}"
homebrew_casks:
  - name: run-mcp
    ids: [archives]
    description: "A fast, portable, single-binary security scanner for the Model Context Protocol (MCP)."
    homepage: "https://github.com/ensigniasec/run-mcp"
    # Remove macOS quarantine so Gatekeeper doesn't block first run
    hooks:
      post:
        install: |
          if OS.mac?
            system_command "/usr/bin/xattr", args: ["-dr", "com.apple.quarantine", "#{staged_path}/run-mcp"], sudo: true
          end
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com
    commit_msg_template: "Brew cask update for {{ .ProjectName }} version {{ .Tag }}"
    uninstall:
      delete:
      - "~/.run-mcp/results.json"
      - "~/.run-mcp"
      - "~/Library/Application Support/run-mcp"
      - "~/Library/Application Support/run-mcp/results.json"
    repository:
      owner: ensigniasec
      name: homebrew-run-mcp
      branch: main
      token: "{{ .Env.HOMEBREW_TOKEN }}"
npms:
  - id: run-mcp
    name: "@ensignia/run-mcp"
    description: A fast, portable, single-binary security scanner for the Model Context Protocol (MCP).
    license: Apache-2.0
    author: "Ensignia Security [hello@ensignia.co]"
    repository: git+https://github.com/ensigniasec/run-mcp.git
    bugs: https://github.com/ensigniasec/run-mcp/issues
    keywords:
      - cli
      - golang
      - mcp
      - security
      - scanner
    access: public
    format: tar.gz
    url_template: "https://github.com/ensigniasec/run-mcp/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
changelog:
  format: "{{.SHA}}: {{.Message}} (@{{.AuthorUsername}})"
  sort: asc
  abbrev: -1
  # Compose your release notes with AI.
  # See below for more details.
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug fixes"
      regexp: '^.*?bug(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999
  filters:
    include:
      - "^feat"
      - "^bug"
      - "^refactor"
      - "^test"
      - "^perf"
